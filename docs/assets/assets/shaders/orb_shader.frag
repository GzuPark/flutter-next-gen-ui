{
  "sksl": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uResolution;\nuniform vec4 uPackedData;\nuniform float uMetalness;\nuniform vec3 uLightDir;\nuniform float uLightR;\nuniform vec3 uLightLumP;\nuniform vec3 uAlbedo;\nuniform float uIor;\nuniform float uLightQuadAtt;\nuniform vec3 uAmbientLight;\nuniform float uAmbientLightDepthFactor;\nuniform float uEnergy;\n\nvec4 oColor;\n\nfloat uTime;\nfloat uExposure;\nfloat uFov;\nfloat uRoughness;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvoid FLT_flutter_local_look_at(out mat3 cam, vec3 eye, vec3 center, inout vec3 up)\n{\n    vec3 forward = normalize(center - eye);\n    vec3 right = cross(forward, up);\n    up = cross(right, forward);\n    cam = mat3(vec3(right), vec3(up), vec3(forward));\n}\n\nvoid FLT_flutter_local_sample_camera_ray(out vec3 origin, out vec3 direction, mat3 cam, vec3 eye, inout vec2 uv)\n{\n    uv *= 2.0;\n    uv -= vec2(1.0);\n    uv.y *= (-1.0);\n    float aspectRatio = uResolution.y / uResolution.x;\n    float vWidth = tan(uFov / 2.0);\n    float vHeight = vWidth * aspectRatio;\n    vec3 forward = cam * vec3(0.0, 0.0, 1.0);\n    vec3 rayDir = cam * vec3(uv.x * vWidth, uv.y * vHeight, 1.0);\n    origin = eye;\n    direction = normalize(rayDir);\n}\n\nvec2 FLT_flutter_local_oct_encode(vec3 d)\n{\n    vec3 octant = sign(d);\n    float sum = dot(d, octant);\n    vec3 octahedron = d / vec3(sum);\n    if (octahedron.z < 0.0)\n    {\n        vec3 a = abs(octahedron);\n        vec2 _580 = octant.xy * (vec2(1.0) - a.yx);\n        octahedron.x = _580.x;\n        octahedron.y = _580.y;\n    }\n    return (octahedron.xy * 0.5) + vec2(0.5);\n}\n\nfloat FLT_flutter_local_hash_2d(vec2 pos)\n{\n    vec2 uv = fract(pos * 0.31830990314483642578125) * 50.0;\n    return (2.0 * fract((uv.x * uv.y) * (uv.x + uv.y))) - 1.0;\n}\n\nfloat FLT_flutter_local_noise_2d(vec2 pos)\n{\n    vec2 g = floor(pos);\n    vec2 param = g;\n    float a = FLT_flutter_local_hash_2d(param);\n    vec2 param_1 = g + vec2(1.0, 0.0);\n    float b = FLT_flutter_local_hash_2d(param_1);\n    vec2 param_2 = g + vec2(0.0, 1.0);\n    float c = FLT_flutter_local_hash_2d(param_2);\n    vec2 param_3 = g + vec2(1.0);\n    float d = FLT_flutter_local_hash_2d(param_3);\n    vec2 fp = pos - g;\n    vec2 sfp = smoothstep(vec2(0.0), vec2(1.0), fp);\n    return ((a + ((b - a) * sfp.x)) + ((c - a) * sfp.y)) + (((((a - b) - c) + d) * sfp.x) * sfp.y);\n}\n\nfloat FLT_flutter_local_fbm(vec2 pos)\n{\n    float sum = 0.0;\n    vec2 param = mat2(vec2(1.0, 0.0), vec2(0.0, 1.0)) * pos;\n    sum += FLT_flutter_local_noise_2d(param);\n    vec2 param_1 = mat2(vec2(1.61803400516510009765625, 1.175570011138916015625), vec2(-1.175570011138916015625, 1.61803400516510009765625)) * pos;\n    sum += (0.5 * FLT_flutter_local_noise_2d(param_1));\n    vec2 param_2 = mat2(vec2(1.2360680103302001953125, 3.8042280673980712890625), vec2(-3.8042280673980712890625, 1.2360680103302001953125)) * pos;\n    sum += (0.25 * FLT_flutter_local_noise_2d(param_2));\n    vec2 param_3 = mat2(vec2(-2.472136020660400390625, 7.608456134796142578125), vec2(-7.608456134796142578125, -2.472136020660400390625)) * pos;\n    sum += (0.125 * FLT_flutter_local_noise_2d(param_3));\n    return sum;\n}\n\nvec2 FLT_flutter_local_fbm_sphere_sdf(vec3 center, inout float radius, vec3 pos)\n{\n    vec3 toP = pos - center;\n    radius *= mix(0.5, 1.0, uEnergy);\n    float d = length(toP);\n    vec3 param = toP;\n    vec2 uv = FLT_flutter_local_oct_encode(param);\n    float amp = mix(0.100000001490116119384765625, 0.60000002384185791015625, uEnergy);\n    vec2 param_1 = (uv * 15.0) + (vec2(1.0, -0.4000000059604644775390625) * uTime);\n    float dd = FLT_flutter_local_fbm(param_1) * amp;\n    return vec2((d + dd) - radius, mix(0.4000000059604644775390625, 1.0, float((d - (radius + (1.0 * amp))) > 0.0)));\n}\n\nvec2 FLT_flutter_local_sample_scene(vec3 pos)\n{\n    vec3 param = vec3(0.0, 0.0, -10.0);\n    float param_1 = 2.0;\n    vec3 param_2 = pos;\n    vec2 _704 = FLT_flutter_local_fbm_sphere_sdf(param, param_1, param_2);\n    return _704;\n}\n\nfloat FLT_flutter_local_raymarch(vec3 start, vec3 dir)\n{\n    float tMin = 8.0;\n    float tMax = 15.0;\n    float t = tMin;\n    float result = -1.0;\n    for (int i = 0; i < 30; i++)\n    {\n        if (t >= tMax)\n        {\n            break;\n        }\n        vec3 param = start + (dir * t);\n        vec2 d = FLT_flutter_local_sample_scene(param);\n        if (d.x < 0.00019999999494757503271102905273438)\n        {\n            result = t;\n            break;\n        }\n        t += (d.x * d.y);\n    }\n    return result;\n}\n\nvec3 FLT_flutter_local_sample_normal(vec3 pos)\n{\n    vec3 normalSampleOffsets[4];\n    normalSampleOffsets[0] = vec3(1.0, -1.0, -1.0);\n    normalSampleOffsets[1] = vec3(-1.0, -1.0, 1.0);\n    normalSampleOffsets[2] = vec3(-1.0, 1.0, -1.0);\n    normalSampleOffsets[3] = vec3(1.0);\n    vec3 result = vec3(0.0);\n    for (int i = 0; i < 4; i++)\n    {\n        vec3 param = pos + normalSampleOffsets[i];\n        result += ((normalSampleOffsets[i] * 0.0002886751317419111728668212890625) * FLT_flutter_local_sample_scene(param).x);\n    }\n    return normalize(result);\n}\n\nvec3 FLT_flutter_local_fresnel_schlick(float cosTheta, vec3 F0)\n{\n    return F0 + ((vec3(1.0) - F0) * pow(1.0 - cosTheta, 5.0));\n}\n\nvec3 FLT_flutter_local_closest_point_on_disc(vec3 center, vec3 normal, float radius, vec3 p)\n{\n    vec3 r = p - center;\n    vec3 pr = r - (normal * dot(r, normal));\n    return center + (normalize(pr) * min(length(pr), radius));\n}\n\nfloat FLT_flutter_local_illuminanceSphereOrDisk(float cosTheta, float sinSigmaSqr)\n{\n    float cosThetaSqr = cosTheta * cosTheta;\n    float sinTheta = sqrt(1.0 - cosThetaSqr);\n    float illuminance = 0.0;\n    if (cosThetaSqr > sinSigmaSqr)\n    {\n        illuminance = (3.1415927410125732421875 * sinSigmaSqr) * clamp(cosTheta, 0.0, 1.0);\n    }\n    else\n    {\n        float x = sqrt((1.0 / sinSigmaSqr) - 1.0);\n        float y = (-x) * (cosTheta / sinTheta);\n        float sinThetaSqrtY = sinTheta * sqrt(1.0 - (y * y));\n        illuminance = (((cosTheta * acos(y)) - (x * sinThetaSqrtY)) * sinSigmaSqr) + atan(sinThetaSqrtY / x);\n    }\n    return max(illuminance, 0.0);\n}\n\nfloat FLT_flutter_local_evalIlluminanceDisk(vec3 N, vec3 L, vec3 lightN, float lightRadius, float lightDistSqr)\n{\n    float cosTheta = dot(N, L);\n    float lightRSqr = lightRadius * lightRadius;\n    float sinSigmaSqr = lightRSqr / (lightRSqr + max(lightRSqr, lightDistSqr));\n    float param = cosTheta;\n    float param_1 = sinSigmaSqr;\n    float illuminance = FLT_flutter_local_illuminanceSphereOrDisk(param, param_1) * clamp(dot(lightN, -L), 0.0, 1.0);\n    return illuminance;\n}\n\nvec3 FLT_flutter_local_sample_disk_light(inout vec3 L, vec3 P, vec3 N, vec3 lightP, vec3 lightN, float lightR, vec3 lightAtt, vec3 lightLumP)\n{\n    vec3 param = lightP;\n    vec3 param_1 = lightN;\n    float param_2 = lightR;\n    vec3 param_3 = P;\n    vec3 toL = FLT_flutter_local_closest_point_on_disc(param, param_1, param_2, param_3) - P;\n    L = normalize(toL);\n    toL *= lightAtt.x;\n    vec3 param_4 = N;\n    vec3 param_5 = L;\n    vec3 param_6 = lightN;\n    float param_7 = lightR;\n    float param_8 = dot(toL, toL);\n    float illuminance = FLT_flutter_local_evalIlluminanceDisk(param_4, param_5, param_6, param_7, param_8);\n    vec3 Li = lightLumP * illuminance;\n    return Li;\n}\n\nfloat FLT_flutter_local_distribution_ggx(vec3 N, vec3 H, float roughness)\n{\n    float a = roughness * roughness;\n    float a2 = a * a;\n    float NdotH = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH * NdotH;\n    float nom = a2;\n    float denom = (NdotH2 * (a2 - 1.0)) + 1.0;\n    denom = (3.1415927410125732421875 * denom) * denom;\n    return nom / denom;\n}\n\nfloat FLT_flutter_local_geometry_schlick_ggx(float NdotV, float roughness)\n{\n    float r = roughness + 1.0;\n    float k = (r * r) / 8.0;\n    float nom = NdotV;\n    float denom = (NdotV * (1.0 - k)) + k;\n    return nom / denom;\n}\n\nfloat FLT_flutter_local_geometry_smith(vec3 N, vec3 V, float cosTheta, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float param = NdotV;\n    float param_1 = roughness;\n    float ggx2 = FLT_flutter_local_geometry_schlick_ggx(param, param_1);\n    float param_2 = cosTheta;\n    float param_3 = roughness;\n    float ggx1 = FLT_flutter_local_geometry_schlick_ggx(param_2, param_3);\n    return ggx1 * ggx2;\n}\n\nvec3 FLT_flutter_local_brdf_eval(vec3 N, vec3 L, vec3 H, vec3 V, vec3 albedo, inout float roughness, float metalness, vec3 Li)\n{\n    roughness = max(0.20000000298023223876953125, roughness);\n    float cosTheta = max(dot(N, L), 0.0);\n    vec3 F0 = vec3(0.039999999105930328369140625);\n    F0 = mix(F0, albedo, vec3(metalness));\n    vec3 param = N;\n    vec3 param_1 = H;\n    float param_2 = roughness;\n    float NDF = FLT_flutter_local_distribution_ggx(param, param_1, param_2);\n    vec3 param_3 = N;\n    vec3 param_4 = V;\n    float param_5 = cosTheta;\n    float param_6 = roughness;\n    float G = FLT_flutter_local_geometry_smith(param_3, param_4, param_5, param_6);\n    float param_7 = max(dot(H, V), 0.0);\n    vec3 param_8 = F0;\n    vec3 F = FLT_flutter_local_fresnel_schlick(param_7, param_8);\n    vec3 num = F * (NDF * G);\n    float denom = (4.0 * max(dot(N, V), 0.0)) * cosTheta;\n    vec3 spec = num / vec3(max(denom, 0.001000000047497451305389404296875));\n    vec3 kS = F;\n    vec3 kD = vec3(1.0) - kS;\n    kD *= (1.0 - metalness);\n    vec3 Lo = ((((kD * albedo) / vec3(3.1415927410125732421875)) + spec) * Li) * cosTheta;\n    return Lo;\n}\n\nvec4 FLT_flutter_local_pixel_color(vec3 o, vec3 d, vec3 lightP, vec3 lightN, float lightR, vec3 lightAtt, vec3 lightLumP)\n{\n    vec3 param = o;\n    vec3 param_1 = d;\n    float t = FLT_flutter_local_raymarch(param, param_1);\n    vec4 result = vec4(0.0);\n    if (t >= 0.0)\n    {\n        vec3 P = o + (d * t);\n        vec3 param_2 = P;\n        vec3 N = FLT_flutter_local_sample_normal(param_2);\n        vec3 V = -d;\n        vec3 R = refract(-V, N, uIor);\n        float z = dot(vec3(0.0, 0.0, -1.0), P);\n        float zd = smoothstep(mix(0.0, 11.0, uAmbientLightDepthFactor), 14.0, z);\n        vec3 Lo = vec3(0.0);\n        float param_3 = max(dot(N, V), 0.0);\n        vec3 param_4 = vec3(0.0199999995529651641845703125);\n        vec3 S = FLT_flutter_local_fresnel_schlick(param_3, param_4);\n        vec3 param_6 = P;\n        vec3 param_7 = R;\n        vec3 param_8 = lightP;\n        vec3 param_9 = lightN;\n        float param_10 = lightR;\n        vec3 param_11 = lightAtt;\n        vec3 param_12 = lightLumP;\n        vec3 param_5;\n        vec3 _991 = FLT_flutter_local_sample_disk_light(param_5, param_6, param_7, param_8, param_9, param_10, param_11, param_12);\n        vec3 L = param_5;\n        vec3 Li = _991;\n        vec3 param_13 = -N;\n        vec3 param_14 = L;\n        vec3 param_15 = normalize(L + R);\n        vec3 param_16 = R;\n        vec3 param_17 = uAlbedo;\n        float param_18 = uRoughness;\n        float param_19 = uMetalness;\n        vec3 param_20 = Li;\n        vec3 _1019 = FLT_flutter_local_brdf_eval(param_13, param_14, param_15, param_16, param_17, param_18, param_19, param_20);\n        Lo += ((vec3(1.0) - S) * _1019);\n        Lo += ((uAlbedo * zd) * uAmbientLight);\n        result = vec4(Lo, 1.0);\n    }\n    return result;\n}\n\nvoid FLT_main()\n{\n    uTime = uPackedData.x;\n    uExposure = uPackedData.y;\n    uFov = uPackedData.z;\n    uRoughness = uPackedData.w;\n    vec2 uv = vec2(FLT_flutter_local_FlutterFragCoord()) / uResolution;\n    vec3 lightN_1 = normalize(-uLightDir);\n    vec3 lightP_1 = vec3(0.0, 0.0, -10.0) + uLightDir;\n    vec3 lightAtt_1 = vec3(uLightQuadAtt, 0.0, 1.0);\n    vec3 eye = vec3(0.0, 0.0, 1.0);\n    vec3 center = vec3(0.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 param_22 = eye;\n    vec3 param_23 = center;\n    vec3 param_24 = up;\n    mat3 param_21;\n    FLT_flutter_local_look_at(param_21, param_22, param_23, param_24);\n    mat3 cam = param_21;\n    mat3 param_27 = cam;\n    vec3 param_28 = eye;\n    vec2 param_29 = uv;\n    vec3 param_25;\n    vec3 param_26;\n    FLT_flutter_local_sample_camera_ray(param_25, param_26, param_27, param_28, param_29);\n    vec3 o_1 = param_25;\n    vec3 d_1 = param_26;\n    vec3 param_30 = o_1;\n    vec3 param_31 = d_1;\n    vec3 param_32 = lightP_1;\n    vec3 param_33 = lightN_1;\n    float param_34 = uLightR;\n    vec3 param_35 = lightAtt_1;\n    vec3 param_36 = uLightLumP;\n    vec4 hdrColor = abs(FLT_flutter_local_pixel_color(param_30, param_31, param_32, param_33, param_34, param_35, param_36));\n    vec3 ldrColor = vec3(1.0) - exp(min((-hdrColor.xyz) * uExposure, vec3(0.0)));\n    oColor = vec4(ldrColor, hdrColor.w);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return oColor;\n}\n",
  "stage": 1,
  "target_platform": 2,
  "uniforms": [
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 0,
      "name": "uResolution",
      "rows": 2,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 1,
      "name": "uPackedData",
      "rows": 4,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 2,
      "name": "uMetalness",
      "rows": 1,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 3,
      "name": "uLightDir",
      "rows": 3,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 4,
      "name": "uLightR",
      "rows": 1,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 5,
      "name": "uLightLumP",
      "rows": 3,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 6,
      "name": "uAlbedo",
      "rows": 3,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 7,
      "name": "uIor",
      "rows": 1,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 8,
      "name": "uLightQuadAtt",
      "rows": 1,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 9,
      "name": "uAmbientLight",
      "rows": 3,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 10,
      "name": "uAmbientLightDepthFactor",
      "rows": 1,
      "type": 10
    },
    {
      "array_elements": 0,
      "bit_width": 32,
      "columns": 1,
      "location": 11,
      "name": "uEnergy",
      "rows": 1,
      "type": 10
    }
  ]
}